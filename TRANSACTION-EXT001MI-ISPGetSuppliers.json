{"programModules":{"EXT001MI":{"program":"EXT001MI","triggers":{},"transactions":{"ISPGetSuppliers":{"sourceUuid":"2a01a64a-904e-40cf-814d-6eed84d468ea","name":"ISPGetSuppliers","program":"EXT001MI","description":"ALL_MI_0001_GetSuppliers","active":true,"multi":true,"modified":1689255165073,"modifiedBy":"MALSHA01","outputFields":[{"name":"RCTP","description":"Record Type","length":1,"mandatory":false,"type":"A"},{"name":"DIVI","description":"division","length":3,"mandatory":false,"type":"A"},{"name":"SUNO","description":"supplier","length":10,"mandatory":false,"type":"A"},{"name":"SUNM","description":"supplier name","length":36,"mandatory":false,"type":"A"},{"name":"PHNO","description":"telephone number 1","length":16,"mandatory":false,"type":"A"},{"name":"TEPY","description":"payment terms","length":3,"mandatory":false,"type":"A"},{"name":"TECD","description":"cash discount term","length":3,"mandatory":false,"type":"A"},{"name":"PYME","description":"payment method - accounts payable","length":3,"mandatory":false,"type":"A"},{"name":"VTCD","description":"VAT code","length":2,"mandatory":false,"type":"N"},{"name":"CSCD","description":"country","length":3,"mandatory":false,"type":"A"},{"name":"STAT","description":"status","length":2,"mandatory":false,"type":"A"},{"name":"VRNO","description":"VAT registration number","length":16,"mandatory":false,"type":"A"},{"name":"EMAL","description":"email address","length":60,"mandatory":false,"type":"A"},{"name":"PRSU","description":"payee","length":10,"mandatory":false,"type":"A"},{"name":"SUCM","description":"supplier computer communication address","length":20,"mandatory":false,"type":"A"},{"name":"ADR1","description":"address line 1","length":36,"mandatory":false,"type":"A"},{"name":"ADR2","description":"address line 2","length":36,"mandatory":false,"type":"A"},{"name":"ADR3","description":"address line 3","length":36,"mandatory":false,"type":"A"},{"name":"ADR4","description":"address line 4","length":36,"mandatory":false,"type":"A"},{"name":"ASCD","description":"CSCD Address","length":3,"mandatory":false,"type":"A"},{"name":"PONO","description":"Postal code","length":10,"mandatory":false,"type":"A"},{"name":"EDES","description":"place","length":10,"mandatory":false,"type":"A"},{"name":"TOWN","description":"city","length":20,"mandatory":false,"type":"A"},{"name":"ECAR","description":"state","length":2,"mandatory":false,"type":"A"},{"name":"IAPC","description":"invoice approval condition 1","length":1,"mandatory":false,"type":"N"},{"name":"BDIV","description":"Bank Division","length":3,"mandatory":false,"type":"A"},{"name":"BKID","description":"bank account identity","length":5,"mandatory":false,"type":"A"},{"name":"BAF1","description":"bank account field 1","length":15,"mandatory":false,"type":"A"},{"name":"FIAN","description":"account number at financial institution","length":25,"mandatory":false,"type":"A"},{"name":"IBAN","description":"international bank account number","length":34,"mandatory":false,"type":"A"},{"name":"CBPY","description":"bank priority","length":2,"mandatory":false,"type":"N"},{"name":"BKST","description":"Bank Status","length":2,"mandatory":false,"type":"A"},{"name":"ALSU","description":"Search key","length":10,"mandatory":false,"type":"A"}],"inputFields":[{"name":"STAT","description":"Status","length":2,"mandatory":false,"type":"A"},{"name":"SUNO","description":"supplier","length":10,"mandatory":false,"type":"A"},{"name":"DIVI","description":"Division","length":3,"mandatory":false,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"2a01a64a-904e-40cf-814d-6eed84d468ea":{"uuid":"2a01a64a-904e-40cf-814d-6eed84d468ea","updated":1689592538428,"updatedBy":"MALSHA01","created":1689254904724,"createdBy":"MALSHA01","apiVersion":"0.14","beVersion":"16.0.0.20230516150031.5","language":"GROOVY","codeHash":"009228ABF9878DDE0953E55048621A6C64D068B34B74ABD5211F227586CBC221","code":""}}}