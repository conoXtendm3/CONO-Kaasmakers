{"signature":"AhyWPp1Y4+KnEqPSGeP0HaggOary5FCnjtQKrMdRE8ywN+updx52DbvfM19DWNsaSWpmD95Xo0eJMy61RZSbEd2z70npynzVmo6zpt+cUZ4CcBaVF9nOv7HuO8Bz6j18uydBPzlKDotHhcZgKObwgZZhwLnLszUIxdmbjt6V0KC59aVfDjl/6dW4Cg/6rkcVXxVit/YryOUdolwS4+g8F7T06VoQQ/dUujFlFWzQDAr0H+TCgl/BupGvHRtTOKu+fcbwmvlOXZfZonrzXV7TG1nkiVuDsUohjHrb+KO/OF4hDkIw1jSsPtNFOGwCcypO2pMuNIs9QaYARPIGAObz/3OhYqMo416kAuTAyQ+Gm4FscoDTXajIVStcA79wrMm8FX8PtmeroPOQBsHy391AB7K83FANC6KGacGRm2y0pNpSPEWggzWERPUzaP/YgHeALSRBcyivUzkCdskarrLrsAZRBSZd78MaGBLjewZjdVbwUzbB72t29IfdZCiRkp3ZxgJEAbPFFLqvny1Dy4OYr7amtBPiQ1sXJZpH1Y6SU2EM4dvAgcNWPwJMaOb6mxquappMxKguutZ/BrXQQwf3l1CizhK/oo+UD9kKOt5gMBxS3xBQq2qPWgpvCen2L6K7XJIbfw3klClHupGXH0tNoPRqErnJ5OcCtcWfd9s05eWf","signedBy":"Erfan Yousefi","signed":1689857716640,"message":"Signed by XtendM3 Team","extension":"{\"programModules\":{\"EXT001MI\":{\"program\":\"EXT001MI\",\"triggers\":{},\"transactions\":{\"ISPGetPrchseOrd\":{\"sourceUuid\":\"f65058ed-dac1-40d1-a9ed-feebcaf6a608\",\"name\":\"ISPGetPrchseOrd\",\"program\":\"EXT001MI\",\"description\":\"ALL_MI_0001_GetPurchaseOrders\",\"active\":true,\"multi\":true,\"modified\":1689255131453,\"modifiedBy\":\"MALSHA01\",\"outputFields\":[{\"name\":\"RCTP\",\"description\":\"Record Type (OH,OC,OL,LR,LC)\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"DIVI\",\"description\":\"division\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"FACI\",\"description\":\"facility\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"WHLO\",\"description\":\"warehouse\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PUNO\",\"description\":\"purchase order number\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"SUNO\",\"description\":\"supplier\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"SUNM\",\"description\":\"supplier name\",\"length\":700,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"RENM\",\"description\":\"name\",\"length\":36,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"BUYE\",\"description\":\"buyer\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CSCD\",\"description\":\"country\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CUCD\",\"description\":\"currency\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"DATE\",\"description\":\"entry date\",\"length\":8,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"PUDT\",\"description\":\"order date\",\"length\":8,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"DWDT\",\"description\":\"requested delivery date\",\"length\":8,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"YRE1\",\"description\":\"your reference\",\"length\":36,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PHNO\",\"description\":\"telephone number 1\",\"length\":16,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"TFNO\",\"description\":\"facsimile transmission number\",\"length\":16,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"REMK\",\"description\":\"remark\",\"length\":30,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"ORTY\",\"description\":\"order type\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"COAM\",\"description\":\"total order cost\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"TOQT\",\"description\":\"total quantity\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"TEPY\",\"description\":\"payment terms\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"MODL\",\"description\":\"delivery method\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"TEDL\",\"description\":\"delivery terms\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"TEPA\",\"description\":\"packaging terms\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"TEL1\",\"description\":\"terms text\",\"length\":36,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PUSL\",\"description\":\"lowest status - purchase order\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PUST\",\"description\":\"highest status - purchase order\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CDSE\",\"description\":\"sequence number - costing element\",\"length\":4,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"REPN\",\"description\":\"receiving number\",\"length\":10,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"EXTY\",\"description\":\"charge type\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"TX30\",\"description\":\"description\",\"length\":30,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"EXIC\",\"description\":\"charge invoicing\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"WSOP\",\"description\":\"costing operator\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CCUC\",\"description\":\"Charge Currency\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CEVA\",\"description\":\"costing element amount\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"CEVJ\",\"description\":\"adjusted costing element amount\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"THPR\",\"description\":\"3rd party charges\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"IVCQ\",\"description\":\"invoice charge quantity\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"CEID\",\"description\":\"costing element\",\"length\":6,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PNLI\",\"description\":\"purchase order line\",\"length\":3,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"PNLS\",\"description\":\"purchase order line subnumber\",\"length\":3,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"ITNO\",\"description\":\"item number\",\"length\":15,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"ADQA\",\"description\":\"transport notified quantit alternate U/M\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"ORQT\",\"description\":\"ordered quantity - basic U/M\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"TRDT\",\"description\":\"transaction date\",\"length\":8,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"LWHL\",\"description\":\"Line Warehouse\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PITD\",\"description\":\"purchase order item name\",\"length\":60,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PITT\",\"description\":\"purchase order item description\",\"length\":120,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"SITE\",\"description\":\"supplier item number\",\"length\":30,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CAQA\",\"description\":\"approved quantity - alternate U/M\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RJQA\",\"description\":\"rejected quantity\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"SDQA\",\"description\":\"stored quantity\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"ORQA\",\"description\":\"ordered quantity - alternate U/M\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"IVQA\",\"description\":\"invoiced quantity - alternate U/M\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RVQA\",\"description\":\"received quantity\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"CFQA\",\"description\":\"confirmed quantity\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"OQPU\",\"description\":\"Open Quantity Price UM\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PURC\",\"description\":\"requisition by\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LBUY\",\"description\":\"Line Buyer\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"STUM\",\"description\":\"Standard UM\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"UNMS\",\"description\":\"basic unit of measure\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"ALUM\",\"description\":\"Alternative UM\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CWUN\",\"description\":\"Catch weight UM\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LNAM\",\"description\":\"line amount - order currency\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"PUPR\",\"description\":\"purchase price\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"PUQT\",\"description\":\"purchased quantity\",\"length\":15,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"ALPR\",\"description\":\"Alternative Price\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"PTCD\",\"description\":\"purchase price text\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"VTCD\",\"description\":\"VAT code\",\"length\":2,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"GRMT\",\"description\":\"goods receiving method\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LMOD\",\"description\":\"Line MODL\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LTED\",\"description\":\"Line TEDL\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LTEL\",\"description\":\"Line TEL1\",\"length\":36,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LPSL\",\"description\":\"Line PUSL\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"LPST\",\"description\":\"Line PUST\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"POPN\",\"description\":\"alias number\",\"length\":30,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"RORC\",\"description\":\"reference order category\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RORN\",\"description\":\"reference order number\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"RORL\",\"description\":\"reference order line\",\"length\":6,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RORX\",\"description\":\"line suffix\",\"length\":3,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"SUDO\",\"description\":\"delivery note number\",\"length\":20,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"FRRC\",\"description\":\"freight reference type\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"FRRE\",\"description\":\"freight reference\",\"length\":12,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"AMOP\",\"description\":\"Amount Open Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"AMOR\",\"description\":\"Amount Ordered Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PRCE\",\"description\":\"Price Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"UNIT\",\"description\":\"Unit - Std Unit Value\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"OPQT\",\"description\":\"Open Quantity Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"QTIV\",\"description\":\"Quantity Invoice Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"QTOR\",\"description\":\"Quantity Ordered Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"QTRV\",\"description\":\"Quantity Received - Std Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"ALTU\",\"description\":\"Alternative Unit - Unit Value\",\"length\":3,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"ALQO\",\"description\":\"Alternative Quanity Open Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"ALTP\",\"description\":\"Alternative Price Unit Value\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RPNM\",\"description\":\"Receipt Number\",\"length\":15,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"RELP\",\"description\":\"receipt type\",\"length\":1,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RPDT\",\"description\":\"Receipt Date\",\"length\":8,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"RPQT\",\"description\":\"Receipt Quantity\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"RQAL\",\"description\":\"Receipt Quantity Alternative UM\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"OAOU\",\"description\":\"Open Amount Order UM\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"OALC\",\"description\":\"Open Amount Local Currency\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"OPCW\",\"description\":\"Open Catch Weight\",\"length\":17,\"mandatory\":false,\"type\":\"N\"},{\"name\":\"OQOU\",\"description\":\"Open Quantity Order UM\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"OQPM\",\"description\":\"Open Quantity Purchase Order Price UM\",\"length\":17,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CELD\",\"description\":\"Costing element Description\",\"length\":20,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"IVCS\",\"description\":\"Invoice Costs\",\"length\":20,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"CHFC\",\"description\":\"Charge Factor\",\"length\":20,\"mandatory\":false,\"type\":\"A\"}],\"inputFields\":[{\"name\":\"SUNO\",\"description\":\"supplier\",\"length\":10,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PUNO\",\"description\":\"Purchase Orders List (semi-colon separated)\",\"length\":500,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PUSL\",\"description\":\"lowest status - purchase order\",\"length\":2,\"mandatory\":false,\"type\":\"A\"},{\"name\":\"PUST\",\"description\":\"highest status - purchase order\",\"length\":2,\"mandatory\":false,\"type\":\"A\"}],\"utilities\":[]}},\"batches\":{}}},\"utilities\":{},\"sources\":{\"f65058ed-dac1-40d1-a9ed-feebcaf6a608\":{\"uuid\":\"f65058ed-dac1-40d1-a9ed-feebcaf6a608\",\"updated\":1689591185360,\"updatedBy\":\"MALSHA01\",\"created\":1689254959958,\"createdBy\":\"MALSHA01\",\"apiVersion\":\"0.9\",\"beVersion\":\"16.0.0.20230516150031.5\",\"codeHash\":\"793747C76A0AB56BD7DFF652581C6F171E36DC1C12758E9CE735901DCAA449D5\",\"code\":\"\"}}}"}